name: MSBuild

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2

    # Set up MSVC developer environment
    - uses: ilammy/msvc-dev-cmd@v1.4.1
      with:
        arch: x64

    # Build the Z80-Emu projec
    - name: Build Project
      run: msbuild /m /p:Configuration=Release /p:Platform=x64 Z80-Emu.sln

    # Zip the Release folder
    - name: Zip Release folder
      run: Compress-Archive -Path ./x64/Release/* -DestinationPath ./x64/Release/Z80-Emu.zip

    # Upload the zipped Release folder using v3
    - name: Upload Build Artifact
      uses: actions/upload-artifact@v3
      with:
        name: release-zip
        path: ./x64/Release/Z80-Emu.zip

    # Get the latest release version using GitHub CLI with GH_TOKEN, or fallback to git if CLI fails
    - name: Get Latest Release Version
      id: get_latest_release
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      shell: pwsh
      continue-on-error: true
      run: |
        try {
          # Attempt to get the latest tag using GitHub CLI
          $latestTagOutput = gh release view --json tagName
          echo "DEBUG: Raw gh release output: $latestTagOutput"
      
          $latestTag = gh release view --json tagName --jq '.tagName'
          echo "DEBUG: Latest tag retrieved using gh CLI: $latestTag"
        } catch {
          # Fallback to git if the CLI fails
          $latestTag = git describe --tags $(git rev-list --tags --max-count=1)
          if (-not $latestTag) {
            $latestTag = "v1.0.0"
            echo "DEBUG: No tags found, defaulting to v1.0.0"
          }
        }
        echo "LATEST_TAG=$latestTag" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "DEBUG: Final LATEST_TAG is $latestTag"


    # Debugging the tag and commit message
    - name: Debug Latest Tag and Commit Message
      run: |
        echo "DEBUG: LATEST_TAG=${{ env.LATEST_TAG }}"
        echo "DEBUG: Commit Message=${{ github.event.head_commit.message }}"

    # Set new version based on commit message keywords and output the version
    - name: Determine New Version
      id: determine_version
      shell: pwsh
      run: |
        $latestVersion = "${{ env.LATEST_TAG }}"
        echo "Using latest version: $latestVersion"

        # Split the version and handle missing components
        $versionParts = $latestVersion -replace 'v', '' -split '\.'
        $major = if ($versionParts[0]) { $versionParts[0] } else { "1" }
        $basic = if ($versionParts.Length -gt 1) { $versionParts[1] } else { "0" }
        $minor = if ($versionParts.Length -gt 2) { $versionParts[2] } else { "0" }

        $commitMessage = "${{ github.event.head_commit.message }}".ToLower()

        if ($commitMessage -contains "major") {
            $major = [int]$major + 1
            $basic = 0
            $minor = 0
        } elseif ($commitMessage -contains "basic") {
            $basic = [int]$basic + 1
            $minor = 0
        } elseif ($commitMessage -contains "minor") {
            $minor = [int]$minor + 1
        }

        # Ensure the new version includes all three components
        $newVersion = "v$major.$basic.$minor"
        echo "New version determined: $newVersion"
        echo "::set-output name=new_version::$newVersion"

    # Create a new GitHub release using the latest commit message as the body
    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.determine_version.outputs.new_version }}
        release_name: Z80 Emulator Release ${{ steps.determine_version.outputs.new_version }}
        body: ${{ github.event.head_commit.message }}
        draft: false
        prerelease: false

    # Upload the ZIP artifact to the release
    - name: Upload Build to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./x64/Release/Z80-Emu.zip
        asset_name: Z80-Emu.zip
        asset_content_type: application/zip