name: MSBuild

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2

    # Set up MSVC developer environment
    - uses: ilammy/msvc-dev-cmd@v1.4.1
      with:
        arch: x64

    # Build the Z80-Emu project
    - name: Build Project
      run: msbuild /m /p:Configuration=Release /p:Platform=x64 Z80-Emu.sln

    # Zip the Release folder
    - name: Zip Release folder
      run: Compress-Archive -Path ./x64/Release/* -DestinationPath ./x64/Release/Z80-Emu.zip

    # Upload the zipped Release folder using v3
    - name: Upload Build Artifact
      uses: actions/upload-artifact@v3
      with:
        name: release-zip
        path: ./x64/Release/Z80-Emu.zip

    # Get the latest release version using GitHub CLI with GH_TOKEN
    - name: Get Latest Release Version
      id: get_latest_release
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        latest_tag=$(gh release view --json tagName --jq '.tagName' || echo "v1.0.0")
        echo "LATEST_TAG=$latest_tag" >> $GITHUB_ENV

    # Set new version based on commit message keywords
    - name: Determine New Version
      id: new_version
      run: |
        latest_version=${{ env.LATEST_TAG }}
        major=$(echo $latest_version | cut -d. -f1 | cut -dv -f2)
        basic=$(echo $latest_version | cut -d. -f2)
        minor=$(echo $latest_version | cut -d. -f3)

        commit_message="${{ github.event.head_commit.message }}"
        commit_message_lower=$(echo "$commit_message" | tr '[:upper:]' '[:lower:]')

        if [[ "$commit_message_lower" == *"major"* ]]; then
          major=$((major+1))
          basic=0
          minor=0
        elif [[ "$commit_message_lower" == *"basic"* ]]; then
          basic=$((basic+1))
          minor=0
        elif [[ "$commit_message_lower" == *"minor"* ]]; then
          minor=$((minor+1))
        fi

        echo "new_version=v$major.$basic.$minor" >> $GITHUB_ENV

    # Create a new GitHub release using the latest commit message as the body
    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.new_version }}
        release_name: Z80 Emulator Release ${{ env.new_version }}
        body: ${{ github.event.head_commit.message }}
        draft: false
        prerelease: false

    # Upload the ZIP artifact to the release
    - name: Upload Build to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./x64/Release/Z80-Emu.zip
        asset_name: Z80-Emu.zip
        asset_content_type: application/zip