name: MSBuild

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2

    # Set up MSVC developer environment
    - uses: ilammy/msvc-dev-cmd@v1.4.1
      with:
        arch: x64

    # Build the Z80-Emu project
    - name: Build Project
      run: msbuild /m /p:Configuration=Release /p:Platform=x64 Z80-Emu.sln

    # Zip the Release folder
    - name: Zip Release folder
      run: Compress-Archive -Path ./x64/Release/* -DestinationPath ./x64/Release/Z80-Emu.zip

    # Upload the zipped Release folder using v3
    - name: Upload Build Artifact
      uses: actions/upload-artifact@v3
      with:
        name: release-zip
        path: ./x64/Release/Z80-Emu.zip

    # Get the latest release version using GitHub CLI with GH_TOKEN
    - name: Get Latest Release Version
      id: get_latest_release
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      shell: pwsh
      continue-on-error: true
      run: |
        try {
          $latestTag = gh release view --json tagName --jq '.tagName'
        } catch {
          $latestTag = "v1.0.0"
        }
        echo "LATEST_TAG=$latestTag" | Out-File -FilePath $env:GITHUB_ENV -Append

    # Set new version based on commit message keywords
    - name: Determine New Version
      id: new_version
      shell: pwsh
      run: |
        $latestVersion = "${{ env.LATEST_TAG }}"
        $major = ($latestVersion -split '\.')[0] -replace 'v', ''
        $basic = ($latestVersion -split '\.')[1]
        $minor = ($latestVersion -split '\.')[2]

        $commitMessage = "${{ github.event.head_commit.message }}".ToLower()

        if ($commitMessage -contains "major") {
          $major = [int]$major + 1
          $basic = 0
          $minor = 0
        } elseif ($commitMessage -contains "basic") {
          $basic = [int]$basic + 1
          $minor = 0
        } elseif ($commitMessage -contains "minor") {
          $minor = [int]$minor + 1
        }

        $newVersion = "v$major.$basic.$minor"
        echo "new_version=$newVersion" | Out-File -FilePath $env:GITHUB_ENV -Append

    # Ensure the new_version is not null and valid
    - name: Validate Version Tag
      shell: pwsh
      run: |
        if (-not $newVersion) {
          $newVersion = "v1.0.0"
        }
        if (-not $newVersion.StartsWith('v')) {
          $newVersion = "v$major.$basic.$minor"
        }
        echo "Validated version: $newVersion"

    # Create a new GitHub release using the latest commit message as the body
    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      if: ${{ env.new_version != '' }}
      with:
        tag_name: ${{ env.new_version }}
        release_name: Z80 Emulator Release ${{ env.new_version }}
        body: ${{ github.event.head_commit.message }}
        draft: false
        prerelease: false

    # Upload the ZIP artifact to the release
    - name: Upload Build to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./x64/Release/Z80-Emu.zip
        asset_name: Z80-Emu.zip
        asset_content_type: application/zip